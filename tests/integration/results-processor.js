// Integration test results processor
// Generated by Context Engineering Feature Request Decomposition System

const fs = require('fs');
const path = require('path');

module.exports = (results) => {
  // Process integration test results
  const processedResults = {
    timestamp: new Date().toISOString(),
    summary: {
      total: results.numTotalTests,
      passed: results.numPassedTests,
      failed: results.numFailedTests,
      skipped: results.numPendingTests,
      success_rate: results.numTotalTests > 0 ? (results.numPassedTests / results.numTotalTests) * 100 : 0
    },
    execution_time: results.testResults.reduce((total, result) => total + result.perfStats.end - result.perfStats.start, 0),
    test_suites: results.testResults.map(result => ({
      name: path.basename(result.testFilePath),
      path: result.testFilePath,
      status: result.numFailingTests > 0 ? 'failed' : 'passed',
      tests: result.testResults.map(test => ({
        name: test.title,
        status: test.status,
        duration: test.duration,
        error: test.failureMessages.length > 0 ? test.failureMessages[0] : null
      }))
    })),
    coverage: results.coverageMap ? {
      statements: results.coverageMap.getCoverageSummary().statements.pct,
      branches: results.coverageMap.getCoverageSummary().branches.pct,
      functions: results.coverageMap.getCoverageSummary().functions.pct,
      lines: results.coverageMap.getCoverageSummary().lines.pct
    } : null
  };

  // Save detailed results
  const resultsDir = path.join(process.cwd(), 'coverage', 'integration');
  if (!fs.existsSync(resultsDir)) {
    fs.mkdirSync(resultsDir, { recursive: true });
  }

  const resultsFile = path.join(resultsDir, 'integration-test-results.json');
  fs.writeFileSync(resultsFile, JSON.stringify(processedResults, null, 2));

  // Generate summary report
  const summaryReport = generateSummaryReport(processedResults);
  const summaryFile = path.join(resultsDir, 'integration-test-summary.md');
  fs.writeFileSync(summaryFile, summaryReport);

  console.log('\n📊 Integration Test Results Summary:');
  console.log(`✅ Passed: ${processedResults.summary.passed}`);
  console.log(`❌ Failed: ${processedResults.summary.failed}`);
  console.log(`⏭️ Skipped: ${processedResults.summary.skipped}`);
  console.log(`📈 Success Rate: ${processedResults.summary.success_rate.toFixed(2)}%`);
  console.log(`⏱️ Total Time: ${processedResults.execution_time}ms`);
  
  if (processedResults.coverage) {
    console.log(`📋 Coverage: ${processedResults.coverage.statements.toFixed(2)}% statements`);
  }

  console.log(`📄 Detailed results: ${resultsFile}`);
  console.log(`📝 Summary report: ${summaryFile}`);

  return results;
};

function generateSummaryReport(results) {
  return `# Integration Test Summary Report

**Generated**: ${results.timestamp}

## Test Results

- **Total Tests**: ${results.summary.total}
- **Passed**: ${results.summary.passed} ✅
- **Failed**: ${results.summary.failed} ❌
- **Skipped**: ${results.summary.skipped} ⏭️
- **Success Rate**: ${results.summary.success_rate.toFixed(2)}%
- **Execution Time**: ${results.execution_time}ms

## Coverage Summary

${results.coverage ? `
- **Statements**: ${results.coverage.statements.toFixed(2)}%
- **Branches**: ${results.coverage.branches.toFixed(2)}%
- **Functions**: ${results.coverage.functions.toFixed(2)}%
- **Lines**: ${results.coverage.lines.toFixed(2)}%
` : 'Coverage data not available'}

## Test Suites

${results.test_suites.map(suite => `
### ${suite.name} ${suite.status === 'passed' ? '✅' : '❌'}

**Path**: \`${suite.path}\`
**Status**: ${suite.status}

**Tests**:
${suite.tests.map(test => `- ${test.name}: ${test.status} ${test.status === 'passed' ? '✅' : '❌'} (${test.duration}ms)`).join('\n')}

${suite.tests.filter(test => test.error).map(test => `
**Error in ${test.name}**:
\`\`\`
${test.error}
\`\`\`
`).join('\n')}
`).join('\n')}

## Recommendations

${results.summary.failed > 0 ? `
### Failed Tests
- Review failed test cases and fix underlying issues
- Check test setup and teardown procedures
- Verify feature dependencies are properly configured
` : ''}

${results.coverage && results.coverage.statements < 80 ? `
### Coverage Improvement
- Current statement coverage is ${results.coverage.statements.toFixed(2)}%
- Target: 80% or higher
- Add tests for uncovered code paths
` : ''}

### Next Steps
1. Address any failing tests
2. Review and improve test coverage
3. Consider adding more integration scenarios
4. Update test documentation as needed
`;
}